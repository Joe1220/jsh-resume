{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styled, { css } from \"styled-components\";\nimport ReactDOM from \"react-dom\";\nimport { UseModal } from \"utils/hooks\";\nimport { useEffect, useRef } from \"react\";\nconst StyledModalContainer = styled(\"div\").withConfig({\n  displayName: \"ModalContainer__StyledModalContainer\",\n  componentId: \"sc-5mdmjj-0\"\n})([\"position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);opacity:0;padding:\", \";\", \"\"], props => props.theme.spaces.base, props => props.isShow && css([\"opacity:1;transition:opacity 1s ease-in-out;\"]));\nconst StyledModalContent = styled(\"div\").withConfig({\n  displayName: \"ModalContainer__StyledModalContent\",\n  componentId: \"sc-5mdmjj-1\"\n})([\"position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);overflow-y:auto;min-width:400px;width:478px;background:\", \";\"], props => props.theme.colors.white);\n/**\n * 전체 modal의 컴포넌트\n * utils -> hooks의 modal hooks로 show를 결정\n * 다른 모달창은 organisms -> modals내에 설정한다.\n * ref 로 outside 클릭설정\n */\n\nconst ModalContainer = Component => (_ref) => {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const {\n    isShow,\n    toggleShow\n  } = UseModal();\n  return __jsx(React.Fragment, null, __jsx(\"span\", {\n    style: {\n      cursor: \"pointer\"\n    },\n    onClick: toggleShow\n  }, children), __jsx(ModalPortalContent, _extends({\n    Component: Component,\n    children: children,\n    isShow: isShow,\n    toggleShow: toggleShow\n  }, props)));\n};\n\nconst ModalPortalContent = (_ref2) => {\n  let {\n    Component,\n    children,\n    toggleShow,\n    isShow\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, [\"Component\", \"children\", \"toggleShow\", \"isShow\"]);\n\n  const ref = useRef(null);\n\n  const outsideClick = e => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      toggleShow();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"click\", outsideClick);\n    return () => {\n      document.removeEventListener(\"click\", outsideClick);\n    };\n  });\n  return isShow ? ReactDOM.createPortal(__jsx(StyledModalContainer, {\n    isShow: isShow\n  }, __jsx(StyledModalContent, {\n    ref: ref\n  }, __jsx(Component, props))), document.body) : null;\n};\n\nexport default ModalContainer;","map":null,"metadata":{},"sourceType":"module"}